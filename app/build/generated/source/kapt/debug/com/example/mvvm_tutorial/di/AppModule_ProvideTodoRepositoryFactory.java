// Generated by Dagger (https://dagger.dev).
package com.example.mvvm_tutorial.di;

import com.example.mvvm_tutorial.data.TodoDatabase;
import com.example.mvvm_tutorial.data.TodoRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideTodoRepositoryFactory implements Factory<TodoRepository> {
  private final Provider<TodoDatabase> dbProvider;

  public AppModule_ProvideTodoRepositoryFactory(Provider<TodoDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public TodoRepository get() {
    return provideTodoRepository(dbProvider.get());
  }

  public static AppModule_ProvideTodoRepositoryFactory create(Provider<TodoDatabase> dbProvider) {
    return new AppModule_ProvideTodoRepositoryFactory(dbProvider);
  }

  public static TodoRepository provideTodoRepository(TodoDatabase db) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideTodoRepository(db));
  }
}
